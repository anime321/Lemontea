@model Azienda

<div>
  @Html.ActionLink("Back", "Index")
</div>

@* we use ajax and call preventDefault() on the form's event so the following action params are unnecessary*@
@using (Html.BeginForm(Model != null ? "EditAzienda" : "SaveAzienda", "Azienda", FormMethod.Post, new { id = "azienda_form" }))
{
  @Html.AntiForgeryToken()

  @Html.ValidationSummary(true, "", new { @class = "text-danger" })

  @if (Model != null && Model.Id != 0)
  {
    <script>
      var editingAzienda = true;
    </script>

    @Html.HiddenFor(model => model.Id);
  }
  else
  {
    <script>
      var editingAzienda = false;
    </script>
  }

  <div class="form-group" row col>
    @Html.LabelFor(model => model.RagioneSociale, "Ragione sociale")
    @Html.EditorFor(model => model.RagioneSociale, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.RagioneSociale, "", new { @class = "text-danger" })
  </div>

  <div class="row">
    <div class="form-group col-8">
      @Html.LabelFor(model => model.Indirizzo, "Indirizzo")
      @Html.EditorFor(model => model.Indirizzo, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.Indirizzo, "", new { @class = "text-danger" })
    </div>
    <div class="form-group col-2">
      @Html.LabelFor(model => model.NCivico, "N° civico")
      @Html.EditorFor(model => model.NCivico, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.NCivico, "", new { @class = "text-danger" })
    </div>
    <div class="form-group col-2">
      @Html.LabelFor(model => model.CAP, "CAP")
      @Html.EditorFor(model => model.CAP, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.CAP, "", new { @class = "text-danger" })
    </div>
  </div>

  <div class="row">
    <div class="form-group col">

      @(Html.Kendo().DropDownList()
        .Name("Nazione")
        .DataTextField("countryName")
        .DataValueField("alpha2Code")
        .Value(Model != null ? Model.Nazione : "")
        .DataSource(source =>
        {
          source.Read(read =>
          {
            read.Action("Get", "Country");
          })
          .ServerFiltering(false);
        })
      )

    </div>
    <div class="form-group col">
      @Html.LabelFor(model => model.Provincia, "Provincia")
      @Html.EditorFor(model => model.Provincia, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.Provincia, "", new { @class = "text-danger" })
    </div>
    <div class="form-group col">
      @Html.LabelFor(model => model.Citta, "Città")
      @Html.EditorFor(model => model.Citta, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.Citta, "", new { @class = "text-danger" })
    </div>
  </div>

  <div class="row">
    <div class="form-group col">

      @(Html.Kendo().MultiColumnComboBox()
          .Name("Telefono")
          .Placeholder("Telefono")
          .DataTextField("phoneCode")
          .DataValueField("alpha2Code")
          .Value(Model != null ? Model.Telefono : "")
          .DropDownWidth("100px")
          .Columns(columns =>
          {
            columns.Add().Field("phoneCode").Title("Phone Code").Width("100px");
          })
          .DataSource(source =>
          {
            source.Read(read =>
            {
              read.Action("Get", "Country");
            })
            .ServerFiltering(false);
          })
      )

    </div>
    <div class="form-group col">
      @Html.LabelFor(model => model.Fax, "Fax")
      @Html.EditorFor(model => model.Fax, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.Fax, "", new { @class = "text-danger" })
    </div>
    <div class="form-group col">
      @Html.LabelFor(model => model.Email, "Email aziendale")
      @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
    </div>
  </div>

  <div class="row">
    <div class="form-group col-4">
      @Html.LabelFor(model => model.SitoWeb, "Sito Web")
      @Html.EditorFor(model => model.SitoWeb, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.SitoWeb, "", new { @class = "text-danger" })
    </div>
  </div>


  <div class="row">
    <div class="form-group col-4">
      @Html.LabelFor(model => model.PartitaIVA, "Partita IVA")
      @Html.EditorFor(model => model.PartitaIVA, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.PartitaIVA, "", new { @class = "text-danger" })
    </div>
    <div class="form-group col-4">
      @Html.LabelFor(model => model.CodiceFiscale, "Codice fiscale")
      @Html.EditorFor(model => model.CodiceFiscale, new { htmlAttributes = new { @class = "form-control" } })
      @Html.ValidationMessageFor(model => model.CodiceFiscale, "", new { @class = "text-danger" })
    </div>
  </div>

  <div class="row col">
    <button type="submit" id="submit_button" class="btn btn-primary">Save</button>
  </div>
}

@section Scripts {
  @{await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

  <script>
    $('#azienda_form').submit(e => {
      e.preventDefault();

      // check all form data for validity before making any calls
      if (!$('#azienda_form').valid())
        return;

      $.ajax({
        url: editingAzienda ? '/Azienda/EditAzienda' : '/Azienda/SaveAzienda',
        method: editingAzienda ? 'PUT' : 'POST',
        data: $('#azienda_form').serialize(),
        success: data => {
          window.location = '/Azienda/Index';
        }
      });
    });
  </script>
}


